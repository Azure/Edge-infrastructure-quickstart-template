parameters:
  - name: stage
    type: string
  - name: siteId
    type: string
  - name: keyVaultName
    type: string
    default: <your_key_vault_name> # TODO: Change this to your key vault name
  - name: azureConnectionName
    type: string
    default: <your_service_connection_name> # TODO: Change this to your service connection name
  - name: backendAzureRmResourceGroupName
    type: string
    default: <your_backend_rg_name> # TODO: Change this to your backend storage account resource group name
  - name: backendAzureRmStorageAccountName
    type: string
    default: <your_backend_sa_name> # TODO: Change this to your backend storage account name
  - name: backendAzureRmContainerName
    type: string
    default: <your_backend_container_name> # TODO: Change this to your backend storage account container name

steps:
  - task: AzureKeyVault@2
    displayName: Connect Azure Key Vault to mask secrets
    inputs:
      azureSubscription: ${{ parameters.azureConnectionName }}
      KeyVaultName: ${{ parameters.keyVaultName }}
      SecretsFilter: "*"
      RunAsPreJob: false

  - task: AzurePowerShell@5
    displayName: Set secrets to tfvars
    inputs:
      azureSubscription: ${{ parameters.azureConnectionName }}
      azurePowerShellVersion: LatestVersion
      ScriptType: 'InlineScript'
      Inline: |
        $PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'
        $subscriptionId = (Get-AzContext).Subscription.id
        echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$subscriptionId"
        echo "subscriptionId=`"$subscriptionId`"" > ${{ parameters.siteId }}.auto.tfvars

        # Secret name map to tf variable name
        $secretsToLoad = @{
          "localAdminUser" = "localAdminUser"
          "localAdminPassword" = "localAdminPassword"
          "domainAdminUser" = "domainAdminUser"
          "domainAdminPassword" = "domainAdminPassword"
          "deploymentUserPassword" = "deploymentUserPassword"
          "servicePrincipalId" = "servicePrincipalId"
          "servicePrincipalSecret" = "servicePrincipalSecret"
          "rpServicePrincipalObjectId" = "rpServicePrincipalObjectId"
          "vmAdminPassword" = "vmAdminPassword"
          "domainJoinPassword" = "domainJoinPassword"
        }

        foreach ($secret in $secretsToLoad.GetEnumerator()) {
          try {
            $key = echo "${{ parameters.siteId }}-$($secret.Name)"
            echo "Finding $key"
            $value = Get-AzKeyVaultSecret -VaultName "${{ parameters.keyVaultName }}" -Name "$key" -AsPlainText
            if (!$value) {
              throw "site secret not found for $($secret.Name)"
            }
            echo "##[command]Got secret value: $value"
            echo "$($secret.Value)=`"$value`"" >> ${{ parameters.siteId }}.auto.tfvars
            echo "##vso[task.setsecret]$value"
          } catch {
            echo $_
            try {
              echo "Finding $($secret.Name)"
              $value = Get-AzKeyVaultSecret -VaultName "${{ parameters.keyVaultName }}" -Name "$($secret.Name)" -AsPlainText
              if (!$value) {
                throw "$secret not found!"
              }
              echo "##[command]Got secret value: $value"
              echo "$($secret.Value)=`"$value`"" >> ${{ parameters.siteId }}.auto.tfvars
              echo "##vso[task.setsecret]$value"
            } catch {
              echo $_
            }
          }
        }
  
  - task: DownloadPipelineArtifact@2
    displayName: Download global tfvars
    inputs:
      artifact: drop
      targetPath: $(System.DefaultWorkingDirectory)

  - task: CopyFiles@2
    displayName: Copy file
    inputs:
      Contents: |
        *.auto.tfvars
      targetFolder: "${{ parameters.stage }}/${{ parameters.siteId }}"
  
  - task: AzureCLI@2
    displayName: Fetch credentials for azure
    inputs:
      azureSubscription: ${{ parameters.azureConnectionName }}
      scriptType: ps
      addSpnToEnvironment: true
      useGlobalConfig: true
      scriptLocation: inlineScript
      inlineScript: |
        try {
          echo "servicePrincipalId: $env:servicePrincipalId"
          echo "servicePrincipalKey: $env:servicePrincipalKey"
          echo "idToken: $env:idToken"
          echo "##[command]set ARM_TENANT_ID"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]$env:tenantId"
          echo "##[command]set ARM_SUBSCRIPTION_ID"
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]$env:servicePrincipalId"
          echo "##[command]set ARM_CLIENT_SECRET"
          echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$env:servicePrincipalKey"
          echo "##[command]set OIDC_REQUEST_URL"
          $OIDC_REQUEST_URL="${env:SYSTEM_OIDCREQUESTURI}?api-version=7.1&serviceConnectionId=${env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID}"
          echo "##vso[task.setvariable variable=OIDC_REQUEST_URL]$OIDC_REQUEST_URL"
          echo "##[command]set ADO_ACCESS_TOKEN"
          echo "##vso[task.setvariable variable=ADO_ACCESS_TOKEN;issecret=true]$(System.AccessToken)"
        } catch {
          echo $_
        }
  
  - powershell: |
      echo "ARM_CLIENT_SECRET: $env:ARM_CLIENT_SECRET"
      echo "OIDC_REQUEST_URL: $env:OIDC_REQUEST_URL"
      echo "ADO_ACCESS_TOKEN: $env:ADO_ACCESS_TOKEN"
      if (-not $env:ARM_CLIENT_SECRET -and -not $env:ADO_ACCESS_TOKEN) {
        throw "No credentials found!"
      }
    env:
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      OIDC_REQUEST_URL: $(OIDC_REQUEST_URL)
      ADO_ACCESS_TOKEN: $(ADO_ACCESS_TOKEN)
    displayName: 'Check env vars'

  - task: TerraformInstaller@1
    displayName: Install terraform
  
  - task: TerraformTaskV4@4
    displayName: 'terraform init'
    inputs:
      command: init
      backendType: azurerm
      # Service connection to authorize backend access. Supports Subscription & Management Group Scope
      backendServiceArm: ${{ parameters.azureConnectionName }}
      backendAzureRmResourceGroupName: ${{ parameters.backendAzureRmResourceGroupName }}
      backendAzureRmStorageAccountName: ${{ parameters.backendAzureRmStorageAccountName }}
      backendAzureRmContainerName: ${{ parameters.backendAzureRmContainerName }}
      backendAzureRmKey: ${{ parameters.siteId }}.tfstate
      workingDirectory: "${{ parameters.stage }}/${{ parameters.siteId }}"
  
  - task: TerraformTaskV4@4
    name: terraformPlan
    displayName: 'terraform plan'
    env:
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      OIDC_REQUEST_URL: $(OIDC_REQUEST_URL)
      ADO_ACCESS_TOKEN: $(ADO_ACCESS_TOKEN)
    inputs:
      provider: 'azurerm'
      command: 'plan'
      commandOptions: '-input=false -out ${{ parameters.siteId }}.tfplan'
      environmentServiceNameAzureRM: ${{ parameters.azureConnectionName }}
      workingDirectory: "${{ parameters.stage }}/${{ parameters.siteId }}"
  
  - task: TerraformTaskV4@4
    displayName: Apply Terraform Plan
    condition: eq(variables['terraformPlan.changesPresent'], 'true')
    env:
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      OIDC_REQUEST_URL: $(OIDC_REQUEST_URL)
      ADO_ACCESS_TOKEN: $(ADO_ACCESS_TOKEN)
    inputs:
      provider: 'azurerm'
      command: 'apply'
      commandOptions: '-auto-approve -input=false ${{ parameters.siteId }}.tfplan'
      environmentServiceNameAzureRM: ${{ parameters.azureConnectionName }}
      workingDirectory: "${{ parameters.stage }}/${{ parameters.siteId }}"
  
  - task: CopyFiles@2
    displayName: Copy tfplan
    inputs:
      Contents: |
        ${{ parameters.stage }}/${{ parameters.siteId }}/${{ parameters.siteId }}.tfplan
        ${{ parameters.stage }}/${{ parameters.siteId }}/${{ parameters.siteId }}.auto.tfvars
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "drop-${{ parameters.stage }}"
