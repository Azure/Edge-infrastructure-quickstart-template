parameters:
  - name: stage
    type: string
  - name: siteId
    type: string
  - name: keyVaultName
    type: string
    default: <your_key_vault_name> # TODO: Change this to your key vault name
  - name: azureConnectionName
    type: string
    default: <your_service_connection_name> # TODO: Change this to your service connection name

steps:
  - task: AzureKeyVault@2
    displayName: Connect Azure Key Vault to mask secrets
    inputs:
      azureSubscription: ${{ parameters.azureConnectionName }}
      KeyVaultName: ${{ parameters.keyVaultName }}
      SecretsFilter: "*"
      RunAsPreJob: false

  - task: AzureCLI@2
    displayName: Set secrets to tfvars
    inputs:
      azureSubscription: ${{ parameters.azureConnectionName }}
      scriptType: ps
      useGlobalConfig: true
      scriptLocation: inlineScript
      inlineScript: |
        $PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'
        $subscriptionId = az account show --query id --output tsv
        echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$subscriptionId"
        echo "subscriptionId=`"$subscriptionId`"" > ${{ parameters.siteId }}.auto.tfvars

        # Secret name map to tf variable name
        $secretsToLoad = @{
          "localAdminUser" = "localAdminUser"
          "localAdminPassword" = "localAdminPassword"
          "domainAdminUser" = "domainAdminUser"
          "domainAdminPassword" = "domainAdminPassword"
          "deploymentUserPassword" = "deploymentUserPassword"
          "servicePrincipalId" = "servicePrincipalId"
          "servicePrincipalSecret" = "servicePrincipalSecret"
          "rpServicePrincipalObjectId" = "rpServicePrincipalObjectId"
          "vmAdminPassword" = "vmAdminPassword"
          "domainJoinPassword" = "domainJoinPassword"
        }

        foreach ($secret in $secretsToLoad.GetEnumerator()) {
          try {
            $key = echo "${{ parameters.siteId }}-$($secret.Name)"
            echo "Finding $key"
            $value = az keyvault secret show --vault-name "${{ parameters.keyVaultName }}" --name "$key" --query value -o tsv
            if (!$value) {
              throw "site secret not found for $($secret.Name)"
            }
            echo "##[command]Got secret value: $value"
            echo "$($secret.Value)=`"$value`"" >> ${{ parameters.siteId }}.auto.tfvars
            echo "##vso[task.setsecret]$value"
          } catch {
            echo $_
            try {
              echo "Finding $($secret.Name)"
              $value = az keyvault secret show --vault-name "${{ parameters.keyVaultName }}" --name "$($secret.Name)" --query value -o tsv
              if (!$value) {
                throw "$secret not found!"
              }
              echo "##[command]Got secret value: $value"
              echo "$($secret.Value)=`"$value`"" >> ${{ parameters.siteId }}.auto.tfvars
              echo "##vso[task.setsecret]$value"
            } catch {
              echo $_
            }
          }
        }
  
  - task: DownloadPipelineArtifact@2
    displayName: Download global tfvars
    inputs:
      artifact: drop
      targetPath: $(System.DefaultWorkingDirectory)

  - task: CopyFiles@2
    displayName: Copy file
    inputs:
      Contents: |
        *.auto.tfvars
      targetFolder: "${{ parameters.stage }}/${{ parameters.siteId }}"
  
  - powershell: |
      if (-not (Test-Path ado-token-converter.exe)) {
        wget https://aka.ms/ado-token-converter -O ado-token-converter.exe
      }
    displayName: Download ado-token-converter.exe

  - task: TerraformInstaller@1
    displayName: Install terraform
  
  - task: AzureCLI@2
    displayName: 'terraform init'
    inputs:
      azureSubscription: ${{ parameters.azureConnectionName }}
      scriptType: ps
      addSpnToEnvironment: true
      useGlobalConfig: true
      scriptLocation: inlineScript
      inlineScript: |
        $env:ARM_USE_AZUREAD = 'true'
        $env:ARM_SUBSCRIPTION_ID = az account show --query id --output tsv
        $env:ARM_TENANT_ID = $env:tenantId
        $env:ARM_CLIENT_ID = $env:servicePrincipalId
        $env:ARM_USE_OIDC = 'true'
        $env:ACTIONS_ID_TOKEN_REQUEST_URL = "${env:SYSTEM_OIDCREQUESTURI}?api-version=7.1&serviceConnectionId=${env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID}" -replace "https://msazure.visualstudio.com", "http://localhost:8080"
        $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN = "$(System.AccessToken)"
        echo "##[command]Start ado-token-converter.exe"
        $job = Start-Job { $(System.DefaultWorkingDirectory)/ado-token-converter.exe | Out-File -FilePath $(System.DefaultWorkingDirectory)/ado-token-converter.${{ parameters.siteId }}.log -Append }
        sleep 15
        echo "Check whether converter is running"
        if ($job.State -ne "Running") {
          Receive-Job -Job $job
          throw "Failed to start converter"
        }
        echo "##[command]terraform init"
        try {
          terraform init
        } finally {
          echo "Stop oidc token job"
          Stop-Job -Job $job
        }
      workingDirectory: "${{ parameters.stage }}/${{ parameters.siteId }}"
  
  - task: AzureCLI@2
    displayName: 'terraform plan'
    inputs:
      azureSubscription: ${{ parameters.azureConnectionName }}
      scriptType: ps
      addSpnToEnvironment: true
      useGlobalConfig: true
      scriptLocation: inlineScript
      inlineScript: |
        $env:ARM_USE_AZUREAD = 'true'
        $env:ARM_SUBSCRIPTION_ID = az account show --query id --output tsv
        $env:ARM_TENANT_ID = $env:tenantId
        $env:ARM_CLIENT_ID = $env:servicePrincipalId
        $env:ARM_USE_OIDC = 'true'
        $env:ACTIONS_ID_TOKEN_REQUEST_URL = "${env:SYSTEM_OIDCREQUESTURI}?api-version=7.1&serviceConnectionId=${env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID}" -replace "https://msazure.visualstudio.com", "http://localhost:8080"
        $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN = "$(System.AccessToken)"
        echo "##[command]Start ado-token-converter.exe"
        $job = Start-Job { $(System.DefaultWorkingDirectory)/ado-token-converter.exe | Out-File -FilePath $(System.DefaultWorkingDirectory)/ado-token-converter.${{ parameters.siteId }}.log -Append }
        sleep 15
        echo "Check whether converter is running"
        if ($job.State -ne "Running") {
          Receive-Job -Job $job
          throw "Failed to start converter"
        }
        echo "##[command]terraform plan -input=false -out ${{ parameters.siteId }}.tfplan"
        try {
          terraform plan -input=false -out ${{ parameters.siteId }}.tfplan
        } finally {
          echo "Stop oidc token job"
          Stop-Job -Job $job
        }
      workingDirectory: "${{ parameters.stage }}/${{ parameters.siteId }}"

  - task: AzureCLI@2
    displayName: 'terraform apply'
    inputs:
      azureSubscription: ${{ parameters.azureConnectionName }}
      scriptType: ps
      addSpnToEnvironment: true
      useGlobalConfig: true
      scriptLocation: inlineScript
      inlineScript: |
        $env:ARM_USE_AZUREAD = 'true'
        $env:ARM_SUBSCRIPTION_ID = az account show --query id --output tsv
        $env:ARM_TENANT_ID = $env:tenantId
        $env:ARM_CLIENT_ID = $env:servicePrincipalId
        $env:ARM_USE_OIDC = 'true'
        $env:ACTIONS_ID_TOKEN_REQUEST_URL = "${env:SYSTEM_OIDCREQUESTURI}?api-version=7.1&serviceConnectionId=${env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID}" -replace "https://msazure.visualstudio.com", "http://localhost:8080"
        $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN = "$(System.AccessToken)"
        echo "##[command]Start ado-token-converter.exe"
        $job = Start-Job { $(System.DefaultWorkingDirectory)/ado-token-converter.exe | Out-File -FilePath $(System.DefaultWorkingDirectory)/ado-token-converter.${{ parameters.siteId }}.log -Append }
        sleep 15
        echo "Check whether converter is running"
        if ($job.State -ne "Running") {
          Receive-Job -Job $job
          throw "Failed to start converter"
        }
        echo "##[command]terraform apply -auto-approve -input=false ${{ parameters.siteId }}.tfplan"
        try {
          terraform apply -auto-approve -input=false ${{ parameters.siteId }}.tfplan
        } finally {
          echo "Stop oidc token job"
          Stop-Job -Job $job
        }
      workingDirectory: "${{ parameters.stage }}/${{ parameters.siteId }}"
  
  - task: CopyFiles@2
    displayName: Copy tfplan
    condition: always()
    inputs:
      Contents: |
        ado-token-converter.${{ parameters.siteId }}.log
        ${{ parameters.stage }}/${{ parameters.siteId }}/${{ parameters.siteId }}.token
        ${{ parameters.stage }}/${{ parameters.siteId }}/${{ parameters.siteId }}.tfplan
        ${{ parameters.stage }}/${{ parameters.siteId }}/${{ parameters.siteId }}.auto.tfvars
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact
    condition: always()
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "drop-${{ parameters.stage }}"
